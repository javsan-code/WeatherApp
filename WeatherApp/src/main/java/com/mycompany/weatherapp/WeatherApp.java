package com.mycompany.weatherapp;

import io.github.cdimascio.dotenv.Dotenv;
import java.net.HttpURLConnection;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONObject;
import java.net.URLEncoder;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import java.util.prefs.Preferences;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class WeatherApp extends javax.swing.JFrame {

    private static final String URL = "https://api.openweathermap.org/data/2.5/weather?q=";
    private static Dotenv dotenv;
    private static String API_KEY = "";
    private static final String CITY_PREFERENCE = "";
    private static String GOOGLE_API_KEY = "";
    private Timer timer;
    private Timer autoCompleteTimer;

    /**
     * Creates new form WeatherAppGUI
     */
    public WeatherApp() {
        dotenv = Dotenv.load();
        API_KEY = dotenv.get("OPENWEATHER_API_KEY");
        GOOGLE_API_KEY = dotenv.get("GOOGLE_PLACES_API_KEY");
        initComponents();
        autoCompleteScrollPane.setVisible(false);
        searchTextField.getDocument().addDocumentListener(documentListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        autoCompleteScrollPane = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        mainPanel = new javax.swing.JPanel();
        temperatureTextField = new javax.swing.JTextField();
        temperatureLabel = new javax.swing.JLabel();
        maxTemperatureTextField = new javax.swing.JTextField();
        maxTemperatureLabel = new javax.swing.JLabel();
        feelsLikeTemeratureTextField = new javax.swing.JTextField();
        feelsLikeTemperatureLabel = new javax.swing.JLabel();
        minTemperatureTextField = new javax.swing.JTextField();
        minTemperatureLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 26);
        jPanel1.add(searchButton, gridBagConstraints);

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 0, 0);
        jPanel1.add(searchTextField, gridBagConstraints);
        Preferences prefs = Preferences.userNodeForPackage(WeatherApp.class);
        String preferredCity = prefs.get(CITY_PREFERENCE , "New York");
        searchTextField.setText(preferredCity);
        getWeatherData();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        autoCompleteScrollPane.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(autoCompleteScrollPane, gridBagConstraints);

        temperatureTextField.setEnabled(false);

        temperatureLabel.setText("Temperature");

        maxTemperatureTextField.setEnabled(false);

        maxTemperatureLabel.setText("Max Temperature");

        feelsLikeTemeratureTextField.setEnabled(false);

        feelsLikeTemperatureLabel.setText("Feels Like Temperature");

        minTemperatureTextField.setEnabled(false);

        minTemperatureLabel.setText("Min Temperature");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxTemperatureLabel)
                            .addComponent(feelsLikeTemperatureLabel)
                            .addComponent(minTemperatureLabel))
                        .addGap(44, 44, 44)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(feelsLikeTemeratureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxTemperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minTemperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(temperatureLabel)
                        .addGap(97, 97, 97)
                        .addComponent(temperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(temperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(temperatureLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxTemperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxTemperatureLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feelsLikeTemeratureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feelsLikeTemperatureLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minTemperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minTemperatureLabel))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchText = searchTextField.getText();
        if (!searchText.isEmpty()) {
            Preferences pref = Preferences.userNodeForPackage(WeatherApp.class);
            pref.put(CITY_PREFERENCE, searchText);
        }
        getWeatherData();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        String searchText = searchTextField.getText();
        if (!searchText.isEmpty()) {
            Preferences pref = Preferences.userNodeForPackage(WeatherApp.class);
            pref.put(CITY_PREFERENCE, searchText);
        }
        getWeatherData();
    }//GEN-LAST:event_searchTextFieldActionPerformed

    public static void main(String[] args) {
        FlatDarkLaf.setup();
        new WeatherApp().setVisible(true);
    }

    private final ActionListener timerAction = (ActionEvent e) -> {
        getWeatherData();
    };

    private void startTimer() {
        if (timer != null && timer.isRunning()) {
            timer.stop();
        }
        timer = new Timer(60000, timerAction);
        timer.start();
    }

    private void getWeatherData() {
        String cityName = searchTextField.getText();
        try {
            String urlString = URL + URLEncoder.encode(cityName, "UTF-8") + "&appid=" + API_KEY + "&units=imperial";
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept", "application/json");
            String data = readData(connection);
            JSONObject json = new JSONObject(data);
            readJsonData(json);

        } catch (MalformedURLException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        startTimer();
    }

    private void readJsonData(JSONObject json) {
        JSONObject mainData = json.getJSONObject("main");
        BigDecimal temp = (BigDecimal) mainData.getBigDecimal("temp");
        BigDecimal tempMin = mainData.getBigDecimal("temp_min");
        BigDecimal feelsLike = mainData.getBigDecimal("feels_like");
        BigDecimal tempMax = mainData.getBigDecimal("temp_max");
        temperatureTextField.setText(temp.toString());
        maxTemperatureTextField.setText(tempMax.toString());
        minTemperatureTextField.setText(tempMin.toString());
        feelsLikeTemeratureTextField.setText(feelsLike.toString());
    }

    private String readData(HttpURLConnection connection) {
        try {
            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line;
                StringBuilder response = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                System.out.println("Response Body: " + response.toString());
                return response.toString();
            }
        } catch (IOException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }

    DocumentListener documentListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            startAutoCompleteTimer();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            startAutoCompleteTimer();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {

        }
    };

    private void startAutoCompleteTimer() {
        if (autoCompleteTimer != null && autoCompleteTimer.isRunning()) {
            autoCompleteTimer.stop();
        }
        autoCompleteTimer = new Timer(1000, autoCompleteAction);
        autoCompleteTimer.start();
    }

    private ActionListener autoCompleteAction = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            //Call Autocomplete API and update jlist in SwingUtlities
            updateJList();

        }
    };

    private void updateJList() {
        String currentInput = searchTextField.getText();
        String autocompleteAPI = "https://maps.googleapis.com/maps/api/place/autocomplete/json?input=";
        try {
            String urlString = autocompleteAPI + URLEncoder.encode(currentInput, "UTF-8") + "&types=(cities)&key=" + GOOGLE_API_KEY;
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept", "application/json");
            String data = readData(connection);
            JSONObject json = new JSONObject(data);
            //get the predictions and add them to the jlist
        } catch (MalformedURLException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane autoCompleteScrollPane;
    private javax.swing.JTextField feelsLikeTemeratureTextField;
    private javax.swing.JLabel feelsLikeTemperatureLabel;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel maxTemperatureLabel;
    private javax.swing.JTextField maxTemperatureTextField;
    private javax.swing.JLabel minTemperatureLabel;
    private javax.swing.JTextField minTemperatureTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel temperatureLabel;
    private javax.swing.JTextField temperatureTextField;
    // End of variables declaration//GEN-END:variables
}
