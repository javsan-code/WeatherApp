package com.mycompany.weatherapp;

import io.github.cdimascio.dotenv.Dotenv;
import java.net.HttpURLConnection;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONObject;
import java.net.URLEncoder;

/**
 *
 * @author javie
 */
public class WeatherApp extends javax.swing.JFrame {

    private static final String URL = "https://api.openweathermap.org/data/2.5/weather?q=";
    private static Dotenv dotenv;
    private static String API_KEY = "";

    /**
     * Creates new form WeatherAppGUI
     */
    public WeatherApp() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String[] args) {
        dotenv = Dotenv.load();
        API_KEY = dotenv.get("OPENWEATHER_API_KEY");
        getWeatherData();
    }

    private static void getWeatherData() {

        String cityName = "New York";
        try {
            String urlString = URL + URLEncoder.encode(cityName, "UTF-8") + "&appid=" + API_KEY;
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept", "application/json");
            String data = readData(connection);
            JSONObject json = new JSONObject(data);
            readJsonData(json);

        } catch (MalformedURLException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayWeather() {

    }

    private static void readJsonData(JSONObject json) {
        JSONObject mainData = json.getJSONObject("main");
        System.out.println(mainData);
        BigDecimal temp = (BigDecimal) mainData.getBigDecimal("temp");
        System.out.println(temp);
    }

    private static String readData(HttpURLConnection connection) {
        try {
            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line;
                StringBuilder response = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                System.out.println("Response Body: " + response.toString());
                return response.toString();
            }
        } catch (IOException ex) {
            Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }

    public static String readFullyAsString(InputStream inputStream, String encoding) throws IOException {
        return readFully(inputStream).toString(encoding);
    }

    private static ByteArrayOutputStream readFully(InputStream inputStream) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int length = 0;
        while ((length = inputStream.read(buffer)) != -1) {
            baos.write(buffer, 0, length);
        }
        return baos;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
